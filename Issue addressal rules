# Issue Addressal Rules for AI Development

## üìã Development Guidelines for AI Agents

### üîÑ Rule 1: Documentation Consistency
**AI should update every instance of documentation whenever it works and commits changes, ensuring no documentation remains stale.**

**Implementation:**
- When making changes to any system component, update ALL related documentation files
- Check README.md, DEPLOYMENT.md, PROJECT_OVERVIEW.md, CLAUDE.md for consistency
- Update package.json metadata when changing functionality
- Ensure all URLs, version numbers, and status information remain current
- Verify that deployment instructions match the actual deployment process

**Files to always review for updates:**
- `README.md` - Main project documentation
- `DEPLOYMENT.md` - Deployment instructions and live URLs
- `PROJECT_OVERVIEW.md` - Technical overview and architecture
- `CLAUDE.md` - Development context and session history
- `package.json` - Project metadata and scripts
- `firebase.json` - Deployment configuration
- `.github/workflows/` - CI/CD pipeline documentation

### üìà Rule 2: Version Management
**Always increment version numbers so that the deployed website can be verified as the latest.**

**Implementation:**
- Increment version in `package.json` for every release
- Use semantic versioning (MAJOR.MINOR.PATCH):
  - **MAJOR**: Breaking changes or major feature additions
  - **MINOR**: New features or significant improvements
  - **PATCH**: Bug fixes and minor updates
- Update version references in all documentation
- Add version information to deployment summaries
- Ensure deployed site displays current version for verification

**Version Update Checklist:**
- [ ] Update `package.json` version field
- [ ] Update version badges in README.md
- [ ] Update "Last Updated" dates in documentation
- [ ] Add version info to deployment logs
- [ ] Verify deployed site shows new version

### ‚öôÔ∏è Rule 3: Automation Maintenance
**Update or add workflows and automated actions corresponding to all changes made.**

**Implementation:**
- When adding new features, create or update corresponding tests
- Update GitHub Actions workflows when changing deployment process
- Add new CI/CD steps for new functionality
- Ensure build scripts handle new dependencies or configurations
- Update automation documentation when changing workflows

**Automation Update Requirements:**
- **Tests**: Add tests for new features and update existing tests for changes
- **Build Process**: Update `build-for-firebase.js` and npm scripts as needed
- **Deployment**: Modify `.github/workflows/deploy.yml` for configuration changes
- **Validation**: Update `.github/workflows/ci.yml` for new validation requirements
- **Scripts**: Update or create new scripts in root directory for new workflows

**Workflow Files to Maintain:**
- `.github/workflows/deploy.yml` - Deployment automation
- `.github/workflows/ci.yml` - Continuous integration testing
- `build-for-firebase.js` - Build process for Firebase deployment
- `test-fallback.sh` - Fallback testing when full test suite fails
- `serve.py` - Local development server

### üß™ Rule 4: Testing Requirements
**Ensure all changes are validated through appropriate testing mechanisms.**

**Testing Hierarchy:**
1. **Fallback Tests** - Must always pass (basic validation)
2. **Unit Tests** - Component-level functionality
3. **Integration Tests** - Feature workflow validation
4. **Deployment Tests** - Live site functionality verification

**Testing Checklist:**
- [ ] Run fallback tests: `npm test` (test-fallback.sh)
- [ ] Validate HTML structure and JavaScript syntax
- [ ] Test file upload/download functionality
- [ ] Verify all navigation and UI components work
- [ ] Test on deployed site after deployment
- [ ] Validate mobile responsiveness

### üîí Rule 5: Security and Best Practices
**Maintain security standards and development best practices.**

**Security Requirements:**
- Never commit sensitive data (API keys, passwords, tokens)
- Validate all user inputs and file uploads
- Use HTTPS for all external resources
- Maintain Content Security Policy headers
- Regular dependency updates for security patches

**Best Practices:**
- Single-file application architecture for simplicity
- Progressive enhancement (works without JavaScript for basic functions)
- Mobile-first responsive design
- Graceful error handling and user feedback
- Clear documentation and code comments where needed

### üìä Rule 6: Performance and User Experience
**Optimize for performance and maintain excellent user experience.**

**Performance Standards:**
- Application load time < 2 seconds
- File operations complete < 30 seconds
- Responsive design works on all screen sizes
- Graceful handling of large datasets
- Offline functionality where possible

**User Experience Requirements:**
- Clear error messages and user feedback
- Intuitive navigation and workflow
- Consistent UI design patterns
- Accessibility standards compliance
- Help documentation and tooltips

---

## üîÑ Application Process

### When Starting Work on an Issue:
1. **Analyze Impact**: Determine which rules apply to the changes
2. **Plan Updates**: Create checklist of all files requiring updates
3. **Execute Changes**: Make minimal, targeted changes
4. **Validate**: Run all applicable tests and validation
5. **Document**: Update all relevant documentation
6. **Deploy**: Ensure deployment works and verify live functionality

### Before Committing Changes:
- [ ] All documentation updated and consistent
- [ ] Version number incremented appropriately  
- [ ] Tests passing (fallback tests minimum)
- [ ] Automation workflows updated if needed
- [ ] Security review completed
- [ ] Performance impact assessed

### After Deployment:
- [ ] Live site functionality verified
- [ ] Version number visible on deployed site
- [ ] All features working as expected
- [ ] Documentation matches live functionality
- [ ] Issue marked as resolved with verification steps

---

**Last Updated**: January 24, 2025  
**Version**: 1.0  
**Applies to**: All AI agents working on this repository