name: Auto Issue Creation on Test Failures

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run tests daily to catch regressions
    - cron: '0 6 * * *'

jobs:
  test-and-create-issues:
    name: 'Test and Create Issues on Failures'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers with fallback
      run: |
        chmod +x install-browsers.sh
        chmod +x test-fallback.sh
        ./install-browsers.sh || echo "Browser installation failed, will use fallback tests"
        
    - name: Run Playwright tests
      id: tests
      run: |
        echo "PLAYWRIGHT_FAILED=false" >> $GITHUB_OUTPUT
        echo "FALLBACK_FAILED=false" >> $GITHUB_OUTPUT
        
        if npm test; then
          echo "‚úÖ All Playwright tests passed"
        else
          echo "‚ùå Playwright tests failed - trying fallback tests"
          echo "PLAYWRIGHT_FAILED=true" >> $GITHUB_OUTPUT
          
          if ./test-fallback.sh; then
            echo "‚úÖ Fallback tests passed - basic functionality verified"
            echo "‚ö†Ô∏è Note: Full browser tests failed but core functionality is working"
          else
            echo "‚ùå Both Playwright and fallback tests failed"
            echo "FALLBACK_FAILED=true" >> $GITHUB_OUTPUT
            echo "TEST_FAILED=true" >> $GITHUB_OUTPUT
          fi
        fi
      continue-on-error: true
      
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Create Issue on Test Failure
      if: steps.tests.outputs.TEST_FAILED == 'true' && github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Get test results
          let testSummary = "Test execution failed";
          let detailedResults = "";
          
          try {
            const resultsPath = path.join(process.cwd(), 'test-results', 'results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const { stats, suites } = results;
              
              const passed = stats.passed || 0;
              const failed = stats.failed || 0;
              const skipped = stats.skipped || 0;
              const total = passed + failed + skipped;
              
              testSummary = `üî¥ ${failed} tests failed, ${passed} passed, ${skipped} skipped (${total} total)`;
              
              // Get details of failed tests
              if (suites && suites.length > 0) {
                const failedTests = [];
                
                function extractFailures(suite) {
                  if (suite.tests) {
                    suite.tests.forEach(test => {
                      if (test.results && test.results.some(r => r.status === 'failed')) {
                        failedTests.push({
                          title: test.title,
                          file: suite.title || 'Unknown file',
                          error: test.results.find(r => r.status === 'failed')?.error?.message || 'Unknown error'
                        });
                      }
                    });
                  }
                  if (suite.suites) {
                    suite.suites.forEach(extractFailures);
                  }
                }
                
                suites.forEach(extractFailures);
                
                if (failedTests.length > 0) {
                  detailedResults = "## Failed Tests\n\n" + 
                    failedTests.slice(0, 10).map(test => 
                      `- **${test.file}**: ${test.title}\n  Error: \`${test.error.substring(0, 200)}\``
                    ).join('\n') + 
                    (failedTests.length > 10 ? `\n\n... and ${failedTests.length - 10} more failures` : '');
                }
              }
            }
          } catch (error) {
            console.log('Could not parse test results:', error.message);
          }
          
          // Check if there's already an open issue for test failures
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'test-failure,automated'
          });
          
          const existingIssue = issues.data.find(issue => 
            issue.title.includes('Automated Test Failures Detected')
          );
          
          const commitSha = context.sha.substring(0, 7);
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          const artifactUrl = `${runUrl}#artifacts`;
          
          // Check test failure type
          const playwrightFailed = process.env.GITHUB_OUTPUT?.includes('PLAYWRIGHT_FAILED=true');
          const fallbackFailed = process.env.GITHUB_OUTPUT?.includes('FALLBACK_FAILED=true');
          
          let failureType = "";
          let recommendations = "";
          
          if (fallbackFailed) {
            failureType = "üö® **CRITICAL**: Both Playwright and fallback tests failed";
            recommendations = `## Immediate Actions Required
            
1. **Check core application files** - Basic HTML structure may be corrupted
2. **Verify server functionality** - Application may not be serving correctly
3. **Review recent changes** - Critical functionality may be broken
4. **Run local validation**: \`npm run test:fallback\``;
          } else if (playwrightFailed) {
            failureType = "‚ö†Ô∏è **BROWSER TESTS ONLY**: Playwright tests failed but fallback tests passed";
            recommendations = `## Likely Browser Installation Issues
            
1. **Browser installation failed** - Playwright browsers may not be downloading properly
2. **Core application is working** - Basic functionality verified by fallback tests  
3. **Check browser dependencies** - May need system-level browser packages
4. **Try local test**: \`npm run test:chromium\` after \`npm run install-browsers\``;
          }
          
          const issueBody = `# üö® Automated Test Failures Detected
          
## Summary
${testSummary}
${failureType}

**Commit**: ${commitSha}
**Triggered by**: ${context.eventName}
**Branch**: ${context.ref.replace('refs/heads/', '')}
**Workflow Run**: [View Details](${runUrl})

${detailedResults}

${recommendations}

## Debugging Information
- üìä [View Test Report](${artifactUrl})
- üîç [Download Test Results](${artifactUrl})
- üìã [View CI Logs](${runUrl})

## Test Commands Available
- \`npm test\` - Full Playwright test suite (requires browsers)
- \`npm run test:fallback\` - Basic validation tests (no browser needed)
- \`npm run test:safe\` - Try fallback first, then full tests
- \`npm run validate\` - Basic file and structure validation

## Next Steps
1. Review the test failures above
2. Run \`npm run test:fallback\` locally to verify basic functionality
3. Check if this is a regression from recent changes
4. Fix the failing tests or update them if they need changes
5. Verify the fixes with local testing before committing
6. Close this issue once all tests are passing

## Troubleshooting Tips
- **For browser issues**: Try \`./install-browsers.sh\` or run tests in CI environment
- **For application issues**: Check that the app loads at http://localhost:8080/KPN_System_Workbook.html
- **For structure issues**: Run \`npm run validate\` to check basic file integrity
- **For JavaScript issues**: Look for console errors in browser developer tools

---
*This issue was automatically created by the test failure detection workflow.*
*Issue created at: ${new Date().toISOString()}*`;

          if (existingIssue) {
            // Update existing issue
            await github.rest.issues.createComment({
              issue_number: existingIssue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üîÑ Updated Test Failure Report\n\n${issueBody.replace('# üö® Automated Test Failures Detected', '')}`
            });
            console.log(`Updated existing issue #${existingIssue.number}`);
          } else {
            // Create new issue
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Automated Test Failures Detected',
              body: issueBody,
              labels: ['bug', 'test-failure', 'automated', 'needs-investigation'],
              assignees: ['copilot']
            });
            console.log(`Created new issue #${issue.data.number}`);
          }

    - name: Comment on PR with test results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          let status = '‚úÖ';
          let summary = 'All tests passed';
          
          try {
            const resultsPath = path.join(process.cwd(), 'test-results', 'results.json');
            if (fs.existsSync(resultsPath)) {
              const results = JSON.parse(fs.readFileSync(resultsPath, 'utf8'));
              const { stats } = results;
              
              const passed = stats.passed || 0;
              const failed = stats.failed || 0;
              const skipped = stats.skipped || 0;
              const total = passed + failed + skipped;
              
              if (failed > 0) {
                status = '‚ùå';
                summary = `${failed} tests failed, ${passed} passed, ${skipped} skipped`;
              } else {
                summary = `${passed} tests passed, ${skipped} skipped`;
              }
            }
          } catch (error) {
            console.log('Could not parse test results:', error.message);
            status = '‚ö†Ô∏è';
            summary = 'Test results unavailable';
          }
          
          const runUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ${status} Test Results\n\n**${summary}**\n\n[üìä View detailed report](${runUrl})`
          });